{
  "address": "0xcdF55d76f7de152b3E5dfd220D9214A2C1B5FdF6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_votingEscrow",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "addRewardAtBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "claimRewardsByIndex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getRewardAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingEscrow",
      "outputs": [
        {
          "internalType": "contract IVotingEscrow",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe89f487c00e7b3d47c99f2789b606d6dc7bcbbbe07aa83df2774fd1d755f7877",
  "receipt": {
    "to": null,
    "from": "0x633Db21C73594FBB1cD0DC8829682874f35aD8EF",
    "contractAddress": "0xcdF55d76f7de152b3E5dfd220D9214A2C1B5FdF6",
    "transactionIndex": 185,
    "gasUsed": "1064131",
    "logsBloom": "0x
    "blockHash": "0x8dc3c4ff8e44fb799c0a6fa4470a0cea242c0e32e0a6f967506fdf1347a95c9d",
    "transactionHash": "0xe89f487c00e7b3d47c99f2789b606d6dc7bcbbbe07aa83df2774fd1d755f7877",
    "logs": [],
    "blockNumber": 14781418,
    "cumulativeGasUsed": "12440060",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa770697cecA9Af6584aA59DD9F226eaF6Cd0c2dc"
  ],
  "numDeployments": 1,
  "solcInputHash": "2f52fc9e2c9436dbe54a500dcc1ea2eb",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_votingEscrow\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"addRewardAtBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"claimRewardsByIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingEscrow\",\"outputs\":[{\"internalType\":\"contract IVotingEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addReward(address,uint256)\":{\"params\":{\"_amount\":\"The amount of token\",\"_token\":\"The address of the token\"}},\"addRewardAtBlock(address,uint256,uint256)\":{\"params\":{\"_amount\":\"The amount of token\",\"_block\":\"Block number\",\"_token\":\"The address of the token\"}},\"claimRewards(address)\":{\"params\":{\"_token\":\"The address of the token\"}},\"claimRewardsByIndex(address,uint256)\":{\"params\":{\"_index\":\"The index of the reward\",\"_token\":\"The address of the token\"}},\"getRewardAmount(address,address)\":{\"params\":{\"_address\":\"The address\",\"_token\":\"The address of the token\"}},\"setManager(address,bool)\":{\"params\":{\"_manager\":\"The address of the manager\",\"_status\":\"The status to allow the manager \"}}},\"title\":\"FeeDistributor\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addReward(address,uint256)\":{\"notice\":\"Adds a new reward distribution\"},\"addRewardAtBlock(address,uint256,uint256)\":{\"notice\":\"Adds a new reward distribution at a specific block\"},\"claimRewards(address)\":{\"notice\":\"Claims rewards in _token\"},\"claimRewardsByIndex(address,uint256)\":{\"notice\":\"Claims reward by index in _token\"},\"getRewardAmount(address,address)\":{\"notice\":\"Returns reward amount of _address in _token\"},\"setManager(address,bool)\":{\"notice\":\"Sets the status of a manager\"}},\"notice\":\"Contract shouldn't have added rewards more than tx limit can handle because claiming rewards loops on added rewards\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v3/FeeDistributor.sol\":\"FeeDistributor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/v3/FeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ninterface IVotingEscrow {\\n    function balanceOfAt(address _address, uint _block) external view returns (uint);\\n    function totalSupplyAt(uint _block) external view returns (uint);\\n}\\n\\n/**\\n * @title FeeDistributor\\n * @notice Contract shouldn't have added rewards more than tx limit can handle because claiming rewards loops on added rewards\\n */\\ncontract FeeDistributor {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    struct Reward {\\n        address token;\\n        uint blockNumber;\\n        uint amount; \\n    }\\n\\n    mapping(address => bool) public isManager;\\n    mapping(uint => Reward) public rewards;\\n    //index of reward that is next to be claimed\\n    mapping(address => uint) public lastClaimed;\\n    mapping(address => mapping(uint => bool)) public isClaimed;\\n\\n    uint public numberOfRewards;\\n    IVotingEscrow public votingEscrow;\\n\\n    constructor(address _votingEscrow) public {\\n        votingEscrow = IVotingEscrow(_votingEscrow);\\n        isManager[msg.sender] = true;\\n    }\\n\\n    /** \\n     * @notice Adds a new reward distribution\\n     * @param _token The address of the token\\n     * @param _amount The amount of token\\n     */\\n    function addReward(\\n        address _token,\\n        uint _amount\\n    )\\n        external\\n        onlyManager\\n    {\\n        Reward memory newReward;\\n        newReward.blockNumber = block.number;\\n        newReward.token = _token;\\n        newReward.amount = _amount;\\n\\n        rewards[numberOfRewards] = newReward;\\n        numberOfRewards++;\\n\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);    \\n    }\\n\\n    /** \\n     * @notice Adds a new reward distribution at a specific block\\n     * @param _token The address of the token\\n     * @param _amount The amount of token\\n     * @param _block Block number\\n     */\\n    function addRewardAtBlock(\\n        address _token,\\n        uint _amount,\\n        uint _block\\n    )\\n        external\\n        onlyManager\\n    {\\n        Reward memory newReward;\\n        newReward.blockNumber = _block;\\n        newReward.token = _token;\\n        newReward.amount = _amount;\\n\\n        rewards[numberOfRewards] = newReward;\\n        numberOfRewards++;\\n\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);    \\n    }\\n\\n    /** \\n     * @notice Returns reward amount of _address in _token\\n     * @param _token The address of the token\\n     * @param _address The address\\n     */\\n    function getRewardAmount(\\n        address _token,\\n        address _address\\n    )\\n        external\\n        view\\n        returns(uint reward)\\n    {\\n        uint addressLastClaimed = lastClaimed[_address];\\n        \\n        while(addressLastClaimed < numberOfRewards) {\\n            Reward memory cReward = rewards[addressLastClaimed];\\n\\n            //skip if reward is in a different token or if _address already claimed this reward individually\\n            if(cReward.token != _token || isClaimed[_address][addressLastClaimed]) {\\n                addressLastClaimed++;\\n                continue;\\n            }\\n            \\n            //_address share of total supply of veYAXIS at _block times reward amount\\n            reward += votingEscrow.balanceOfAt(_address, cReward.blockNumber).mul(cReward.amount).div(votingEscrow.totalSupplyAt(cReward.blockNumber));\\n            addressLastClaimed++;\\n        } \\n    }\\n\\n    /** \\n     * @notice Claims rewards in _token\\n     * @param _token The address of the token\\n     */\\n    function claimRewards(\\n        address _token\\n    )\\n        external\\n    {\\n        uint addressLastClaimed = lastClaimed[msg.sender];\\n        require(addressLastClaimed < numberOfRewards, \\\"No rewards to claim\\\");\\n\\n        uint reward;\\n        while(addressLastClaimed < numberOfRewards) {\\n            Reward memory cReward = rewards[addressLastClaimed];\\n            \\n            //skip if sender already claimed this reward individually\\n            if(cReward.token != _token || isClaimed[msg.sender][addressLastClaimed]) {\\n                addressLastClaimed++;\\n                continue;\\n            }\\n            \\n            //sender share of total supply of veYAXIS at _block times reward amount\\n            reward += votingEscrow.balanceOfAt(msg.sender, cReward.blockNumber).mul(cReward.amount).div(votingEscrow.totalSupplyAt(cReward.blockNumber));\\n            isClaimed[msg.sender][addressLastClaimed] = true;\\n            addressLastClaimed++;\\n        } \\n        //to avoid wasting gas on claiming zero tokens \\n        require(reward > 0, \\\"!rewards\\\");\\n\\n        IERC20(_token).safeTransfer(msg.sender, reward);\\n        updateLastClaimed(msg.sender);\\n    }\\n\\n    /** \\n     * @notice Claims reward by index in _token\\n     * @param _token The address of the token\\n     * @param _index The index of the reward\\n     */\\n    function claimRewardsByIndex(\\n        address _token,\\n        uint _index\\n    )\\n        external\\n    {\\n        require(_index < numberOfRewards, \\\"Wrong index\\\");\\n        require(!isClaimed[msg.sender][_index], \\\"Reward is already claimed\\\");\\n\\n        Reward memory cReward = rewards[_index];\\n\\n        uint reward = votingEscrow.balanceOfAt(msg.sender, cReward.blockNumber).mul(cReward.amount).div(votingEscrow.totalSupplyAt(cReward.blockNumber));\\n        isClaimed[msg.sender][_index] = true;\\n        \\n        //to avoid wasting gas on claiming zero tokens\\n        require(reward > 0, \\\"!rewards\\\");\\n\\n        IERC20(_token).safeTransfer(msg.sender, reward);\\n        updateLastClaimed(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Updates lastClaimed that is used to reduce loops\\n     * @param _address The address to optimize\\n     */\\n    function updateLastClaimed(\\n        address _address\\n    )\\n        internal\\n    {\\n        uint addressLastClaimed = lastClaimed[_address];\\n\\n        while(addressLastClaimed < numberOfRewards) {\\n            if(!isClaimed[_address][addressLastClaimed]) {\\n                lastClaimed[_address] = addressLastClaimed;\\n                break;\\n            }\\n            addressLastClaimed++;\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the status of a manager\\n     * @param _manager The address of the manager\\n     * @param _status The status to allow the manager \\n     */\\n    function setManager(\\n        address _manager,\\n        bool _status\\n    )\\n        external\\n        onlyManager\\n    {\\n        isManager[_manager] = _status;\\n    }\\n\\n    modifier onlyManager() {\\n        require(isManager[msg.sender], \\\"!manager\\\");\\n        _;\\n    }\\n}\",\"keccak256\":\"0x7dcfb9ea01a4e37a03944cf8e76cdb285c2044deacca58330f9ff2eb7f45193c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516111f13803806111f18339818101604052602081101561003357600080fd5b5051600580546001600160a01b039092166001600160a01b0319909216919091179055336000908152602081905260409020805460ff191660011790556111728061007f6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063a2c9514111610071578063a2c95141146101bd578063a5e90eee146101eb578063ef5cfb8c14610219578063f301af421461023f578063f3ae241514610284578063ff2ddc22146102aa576100b4565b8063013eba92146100b95780631739faa2146100f15780634f2bfe5b14610125578063562beba81461014957806362de8253146101895780639feb8f5014610191575b600080fd5b6100df600480360360208110156100cf57600080fd5b50356001600160a01b03166102d6565b60408051918252519081900360200190f35b6101236004803603606081101561010757600080fd5b506001600160a01b0381351690602081013590604001356102e8565b005b61012d6103b0565b604080516001600160a01b039092168252519081900360200190f35b6101756004803603604081101561015f57600080fd5b506001600160a01b0381351690602001356103bf565b604080519115158252519081900360200190f35b6100df6103df565b610123600480360360408110156101a757600080fd5b506001600160a01b0381351690602001356103e5565b6100df600480360360408110156101d357600080fd5b506001600160a01b03813581169160200135166104ae565b6101236004803603604081101561020157600080fd5b506001600160a01b0381351690602001351515610685565b6101236004803603602081101561022f57600080fd5b50356001600160a01b03166106ff565b61025c6004803603602081101561025557600080fd5b5035610959565b604080516001600160a01b039094168452602084019290925282820152519081900360600190f35b6101756004803603602081101561029a57600080fd5b50356001600160a01b0316610985565b610123600480360360408110156102c057600080fd5b506001600160a01b03813516906020013561099a565b60026020526000908152604090205481565b3360009081526020819052604090205460ff16610337576040805162461bcd60e51b815260206004820152600860248201526710b6b0b730b3b2b960c11b604482015290519081900360640190fd5b61033f6110a1565b60208181018381526001600160a01b03868116808552604080860188815260048054600090815260019788905292909220875181546001600160a01b03191695169490941784559351838601559251600290920191909155815490920190556103aa90333086610be1565b50505050565b6005546001600160a01b031681565b600360209081526000928352604080842090915290825290205460ff1681565b60045481565b3360009081526020819052604090205460ff16610434576040805162461bcd60e51b815260206004820152600860248201526710b6b0b730b3b2b960c11b604482015290519081900360640190fd5b61043c6110a1565b4360208281019182526001600160a01b03858116808552604080860187815260048054600090815260019687905292909220875181546001600160a01b0319169516949094178455945183850155935160029092019190915582549091019091556104a990333085610be1565b505050565b6001600160a01b0381166000908152600260205260408120545b60045481101561067e576104da6110a1565b50600081815260016020818152604092839020835160608101855281546001600160a01b03908116808352948301549382019390935260029091015493810193909352861614158061054f57506001600160a01b038416600090815260036020908152604080832085845290915290205460ff165b1561055d57506001016104c8565b60055460208083015160408051630981b24d60e41b8152600481019290925251610671936001600160a01b03169263981b24d09260248082019391829003018186803b1580156105ac57600080fd5b505afa1580156105c0573d6000803e3d6000fd5b505050506040513d60208110156105d657600080fd5b5051604080840151600554602086810151845163277166bf60e11b81526001600160a01b038c811660048301526024820192909252945161066b959190931692634ee2cd7e92604480840193919291829003018186803b15801561063957600080fd5b505afa15801561064d573d6000803e3d6000fd5b505050506040513d602081101561066357600080fd5b505190610c3b565b90610c9d565b90920191506001016104c8565b5092915050565b3360009081526020819052604090205460ff166106d4576040805162461bcd60e51b815260206004820152600860248201526710b6b0b730b3b2b960c11b604482015290519081900360640190fd5b6001600160a01b03919091166000908152602081905260409020805460ff1916911515919091179055565b33600090815260026020526040902054600454811061075b576040805162461bcd60e51b81526020600482015260136024820152724e6f207265776172647320746f20636c61696d60681b604482015290519081900360640190fd5b60005b6004548210156108fc576107706110a1565b50600082815260016020818152604092839020835160608101855281546001600160a01b0390811680835294830154938201939093526002909101549381019390935285161415806107dc575033600090815260036020908152604080832086845290915290205460ff165b156107ed575060019091019061075e565b60055460208083015160408051630981b24d60e41b81526004810192909252516108c5936001600160a01b03169263981b24d09260248082019391829003018186803b15801561083c57600080fd5b505afa158015610850573d6000803e3d6000fd5b505050506040513d602081101561086657600080fd5b5051604080840151600554602086810151845163277166bf60e11b81523360048201526024810191909152935161066b946001600160a01b0390931692634ee2cd7e926044808301939192829003018186803b15801561063957600080fd5b3360009081526003602090815260408083208784529091529020805460ff191660019081179091559390930192909101905061075e565b6000811161093c576040805162461bcd60e51b8152602060048201526008602482015267217265776172647360c01b604482015290519081900360640190fd5b6109506001600160a01b0384163383610d04565b6104a933610d56565b60016020819052600091825260409091208054918101546002909101546001600160a01b039092169183565b60006020819052908152604090205460ff1681565b60045481106109de576040805162461bcd60e51b815260206004820152600b60248201526a0aee4dedcce40d2dcc8caf60ab1b604482015290519081900360640190fd5b33600090815260036020908152604080832084845290915290205460ff1615610a4e576040805162461bcd60e51b815260206004820152601960248201527f52657761726420697320616c726561647920636c61696d656400000000000000604482015290519081900360640190fd5b610a566110a1565b506000818152600160208181526040808420815160608101835281546001600160a01b03908116825294820154818501819052600290920154818401526005548351630981b24d60e41b815260048101939093529251909594610b609493169263981b24d09260248082019391829003018186803b158015610ad757600080fd5b505afa158015610aeb573d6000803e3d6000fd5b505050506040513d6020811015610b0157600080fd5b5051604080850151600554602087810151845163277166bf60e11b81523360048201526024810191909152935161066b946001600160a01b0390931692634ee2cd7e926044808301939192829003018186803b15801561063957600080fd5b3360009081526003602090815260408083208784529091529020805460ff19166001179055905080610bc4576040805162461bcd60e51b8152602060048201526008602482015267217265776172647360c01b604482015290519081900360640190fd5b610bd86001600160a01b0385163383610d04565b6103aa33610d56565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526103aa908590610dd1565b600082610c4a57506000610c97565b82820282848281610c5757fe5b0414610c945760405162461bcd60e51b81526004018080602001828103825260218152602001806110f26021913960400191505060405180910390fd5b90505b92915050565b6000808211610cf3576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610cfc57fe5b049392505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526104a9908490610dd1565b6001600160a01b0381166000908152600260205260409020545b600454811015610dcd576001600160a01b038216600090815260036020908152604080832084845290915290205460ff16610dc5576001600160a01b0382166000908152600260205260409020819055610dcd565b600101610d70565b5050565b6060610e26826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610e829092919063ffffffff16565b8051909150156104a957808060200190516020811015610e4557600080fd5b50516104a95760405162461bcd60e51b815260040180806020018281038252602a815260200180611113602a913960400191505060405180910390fd5b6060610e918484600085610e9b565b90505b9392505050565b606082471015610edc5760405162461bcd60e51b81526004018080602001828103825260268152602001806110cc6026913960400191505060405180910390fd5b610ee585610ff7565b610f36576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310610f755780518252601f199092019160209182019101610f56565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114610fd7576040519150601f19603f3d011682016040523d82523d6000602084013e610fdc565b606091505b5091509150610fec828286610ffd565b979650505050505050565b3b151590565b6060831561100c575081610e94565b82511561101c5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561106657818101518382015260200161104e565b50505050905090810190601f1680156110935780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b604051806060016040528060006001600160a01b031681526020016000815260200160008152509056fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220c858bdd476ef93bc4e3925a6d0ed368c6061ce01de18fcda90eae2439ddef4d964736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c8063a2c9514111610071578063a2c95141146101bd578063a5e90eee146101eb578063ef5cfb8c14610219578063f301af421461023f578063f3ae241514610284578063ff2ddc22146102aa576100b4565b8063013eba92146100b95780631739faa2146100f15780634f2bfe5b14610125578063562beba81461014957806362de8253146101895780639feb8f5014610191575b600080fd5b6100df600480360360208110156100cf57600080fd5b50356001600160a01b03166102d6565b60408051918252519081900360200190f35b6101236004803603606081101561010757600080fd5b506001600160a01b0381351690602081013590604001356102e8565b005b61012d6103b0565b604080516001600160a01b039092168252519081900360200190f35b6101756004803603604081101561015f57600080fd5b506001600160a01b0381351690602001356103bf565b604080519115158252519081900360200190f35b6100df6103df565b610123600480360360408110156101a757600080fd5b506001600160a01b0381351690602001356103e5565b6100df600480360360408110156101d357600080fd5b506001600160a01b03813581169160200135166104ae565b6101236004803603604081101561020157600080fd5b506001600160a01b0381351690602001351515610685565b6101236004803603602081101561022f57600080fd5b50356001600160a01b03166106ff565b61025c6004803603602081101561025557600080fd5b5035610959565b604080516001600160a01b039094168452602084019290925282820152519081900360600190f35b6101756004803603602081101561029a57600080fd5b50356001600160a01b0316610985565b610123600480360360408110156102c057600080fd5b506001600160a01b03813516906020013561099a565b60026020526000908152604090205481565b3360009081526020819052604090205460ff16610337576040805162461bcd60e51b815260206004820152600860248201526710b6b0b730b3b2b960c11b604482015290519081900360640190fd5b61033f6110a1565b60208181018381526001600160a01b03868116808552604080860188815260048054600090815260019788905292909220875181546001600160a01b03191695169490941784559351838601559251600290920191909155815490920190556103aa90333086610be1565b50505050565b6005546001600160a01b031681565b600360209081526000928352604080842090915290825290205460ff1681565b60045481565b3360009081526020819052604090205460ff16610434576040805162461bcd60e51b815260206004820152600860248201526710b6b0b730b3b2b960c11b604482015290519081900360640190fd5b61043c6110a1565b4360208281019182526001600160a01b03858116808552604080860187815260048054600090815260019687905292909220875181546001600160a01b0319169516949094178455945183850155935160029092019190915582549091019091556104a990333085610be1565b505050565b6001600160a01b0381166000908152600260205260408120545b60045481101561067e576104da6110a1565b50600081815260016020818152604092839020835160608101855281546001600160a01b03908116808352948301549382019390935260029091015493810193909352861614158061054f57506001600160a01b038416600090815260036020908152604080832085845290915290205460ff165b1561055d57506001016104c8565b60055460208083015160408051630981b24d60e41b8152600481019290925251610671936001600160a01b03169263981b24d09260248082019391829003018186803b1580156105ac57600080fd5b505afa1580156105c0573d6000803e3d6000fd5b505050506040513d60208110156105d657600080fd5b5051604080840151600554602086810151845163277166bf60e11b81526001600160a01b038c811660048301526024820192909252945161066b959190931692634ee2cd7e92604480840193919291829003018186803b15801561063957600080fd5b505afa15801561064d573d6000803e3d6000fd5b505050506040513d602081101561066357600080fd5b505190610c3b565b90610c9d565b90920191506001016104c8565b5092915050565b3360009081526020819052604090205460ff166106d4576040805162461bcd60e51b815260206004820152600860248201526710b6b0b730b3b2b960c11b604482015290519081900360640190fd5b6001600160a01b03919091166000908152602081905260409020805460ff1916911515919091179055565b33600090815260026020526040902054600454811061075b576040805162461bcd60e51b81526020600482015260136024820152724e6f207265776172647320746f20636c61696d60681b604482015290519081900360640190fd5b60005b6004548210156108fc576107706110a1565b50600082815260016020818152604092839020835160608101855281546001600160a01b0390811680835294830154938201939093526002909101549381019390935285161415806107dc575033600090815260036020908152604080832086845290915290205460ff165b156107ed575060019091019061075e565b60055460208083015160408051630981b24d60e41b81526004810192909252516108c5936001600160a01b03169263981b24d09260248082019391829003018186803b15801561083c57600080fd5b505afa158015610850573d6000803e3d6000fd5b505050506040513d602081101561086657600080fd5b5051604080840151600554602086810151845163277166bf60e11b81523360048201526024810191909152935161066b946001600160a01b0390931692634ee2cd7e926044808301939192829003018186803b15801561063957600080fd5b3360009081526003602090815260408083208784529091529020805460ff191660019081179091559390930192909101905061075e565b6000811161093c576040805162461bcd60e51b8152602060048201526008602482015267217265776172647360c01b604482015290519081900360640190fd5b6109506001600160a01b0384163383610d04565b6104a933610d56565b60016020819052600091825260409091208054918101546002909101546001600160a01b039092169183565b60006020819052908152604090205460ff1681565b60045481106109de576040805162461bcd60e51b815260206004820152600b60248201526a0aee4dedcce40d2dcc8caf60ab1b604482015290519081900360640190fd5b33600090815260036020908152604080832084845290915290205460ff1615610a4e576040805162461bcd60e51b815260206004820152601960248201527f52657761726420697320616c726561647920636c61696d656400000000000000604482015290519081900360640190fd5b610a566110a1565b506000818152600160208181526040808420815160608101835281546001600160a01b03908116825294820154818501819052600290920154818401526005548351630981b24d60e41b815260048101939093529251909594610b609493169263981b24d09260248082019391829003018186803b158015610ad757600080fd5b505afa158015610aeb573d6000803e3d6000fd5b505050506040513d6020811015610b0157600080fd5b5051604080850151600554602087810151845163277166bf60e11b81523360048201526024810191909152935161066b946001600160a01b0390931692634ee2cd7e926044808301939192829003018186803b15801561063957600080fd5b3360009081526003602090815260408083208784529091529020805460ff19166001179055905080610bc4576040805162461bcd60e51b8152602060048201526008602482015267217265776172647360c01b604482015290519081900360640190fd5b610bd86001600160a01b0385163383610d04565b6103aa33610d56565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526103aa908590610dd1565b600082610c4a57506000610c97565b82820282848281610c5757fe5b0414610c945760405162461bcd60e51b81526004018080602001828103825260218152602001806110f26021913960400191505060405180910390fd5b90505b92915050565b6000808211610cf3576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610cfc57fe5b049392505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526104a9908490610dd1565b6001600160a01b0381166000908152600260205260409020545b600454811015610dcd576001600160a01b038216600090815260036020908152604080832084845290915290205460ff16610dc5576001600160a01b0382166000908152600260205260409020819055610dcd565b600101610d70565b5050565b6060610e26826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610e829092919063ffffffff16565b8051909150156104a957808060200190516020811015610e4557600080fd5b50516104a95760405162461bcd60e51b815260040180806020018281038252602a815260200180611113602a913960400191505060405180910390fd5b6060610e918484600085610e9b565b90505b9392505050565b606082471015610edc5760405162461bcd60e51b81526004018080602001828103825260268152602001806110cc6026913960400191505060405180910390fd5b610ee585610ff7565b610f36576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310610f755780518252601f199092019160209182019101610f56565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114610fd7576040519150601f19603f3d011682016040523d82523d6000602084013e610fdc565b606091505b5091509150610fec828286610ffd565b979650505050505050565b3b151590565b6060831561100c575081610e94565b82511561101c5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561106657818101518382015260200161104e565b50505050905090810190601f1680156110935780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b604051806060016040528060006001600160a01b031681526020016000815260200160008152509056fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220c858bdd476ef93bc4e3925a6d0ed368c6061ce01de18fcda90eae2439ddef4d964736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addReward(address,uint256)": {
        "params": {
          "_amount": "The amount of token",
          "_token": "The address of the token"
        }
      },
      "addRewardAtBlock(address,uint256,uint256)": {
        "params": {
          "_amount": "The amount of token",
          "_block": "Block number",
          "_token": "The address of the token"
        }
      },
      "claimRewards(address)": {
        "params": {
          "_token": "The address of the token"
        }
      },
      "claimRewardsByIndex(address,uint256)": {
        "params": {
          "_index": "The index of the reward",
          "_token": "The address of the token"
        }
      },
      "getRewardAmount(address,address)": {
        "params": {
          "_address": "The address",
          "_token": "The address of the token"
        }
      },
      "setManager(address,bool)": {
        "params": {
          "_manager": "The address of the manager",
          "_status": "The status to allow the manager "
        }
      }
    },
    "title": "FeeDistributor",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addReward(address,uint256)": {
        "notice": "Adds a new reward distribution"
      },
      "addRewardAtBlock(address,uint256,uint256)": {
        "notice": "Adds a new reward distribution at a specific block"
      },
      "claimRewards(address)": {
        "notice": "Claims rewards in _token"
      },
      "claimRewardsByIndex(address,uint256)": {
        "notice": "Claims reward by index in _token"
      },
      "getRewardAmount(address,address)": {
        "notice": "Returns reward amount of _address in _token"
      },
      "setManager(address,bool)": {
        "notice": "Sets the status of a manager"
      }
    },
    "notice": "Contract shouldn't have added rewards more than tx limit can handle because claiming rewards loops on added rewards",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1753,
        "contract": "contracts/v3/FeeDistributor.sol:FeeDistributor",
        "label": "isManager",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1757,
        "contract": "contracts/v3/FeeDistributor.sol:FeeDistributor",
        "label": "rewards",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Reward)1749_storage)"
      },
      {
        "astId": 1761,
        "contract": "contracts/v3/FeeDistributor.sol:FeeDistributor",
        "label": "lastClaimed",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1767,
        "contract": "contracts/v3/FeeDistributor.sol:FeeDistributor",
        "label": "isClaimed",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 1769,
        "contract": "contracts/v3/FeeDistributor.sol:FeeDistributor",
        "label": "numberOfRewards",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1771,
        "contract": "contracts/v3/FeeDistributor.sol:FeeDistributor",
        "label": "votingEscrow",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IVotingEscrow)1735"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IVotingEscrow)1735": {
        "encoding": "inplace",
        "label": "contract IVotingEscrow",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Reward)1749_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FeeDistributor.Reward)",
        "numberOfBytes": "32",
        "value": "t_struct(Reward)1749_storage"
      },
      "t_struct(Reward)1749_storage": {
        "encoding": "inplace",
        "label": "struct FeeDistributor.Reward",
        "members": [
          {
            "astId": 1744,
            "contract": "contracts/v3/FeeDistributor.sol:FeeDistributor",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1746,
            "contract": "contracts/v3/FeeDistributor.sol:FeeDistributor",
            "label": "blockNumber",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1748,
            "contract": "contracts/v3/FeeDistributor.sol:FeeDistributor",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}