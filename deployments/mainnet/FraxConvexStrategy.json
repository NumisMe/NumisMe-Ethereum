{
  "address": "0x0808A1Fd2eaBE2b74d649E164a7bb5d4aD07F4A3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_want",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_crvethPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_cvxethPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fraxPool",
          "type": "address"
        },
        {
          "internalType": "contract IConvexVault",
          "name": "_convexVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stableSwapPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_routerArray",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ONE_HUNDRED_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approveForSpender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOfPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOfWant",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "convexVault",
      "outputs": [
        {
          "internalType": "contract IConvexVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crv",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvRewards",
      "outputs": [
        {
          "internalType": "contract IConvexRewards",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvethPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cvx",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cvxethPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fraxPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_estimates",
          "type": "uint256[]"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "contract IManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract ISwap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "routerArray",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_routerIndex",
          "type": "uint256"
        }
      ],
      "name": "setDefaultRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_routerArray",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_tokenArray",
          "type": "address[]"
        }
      ],
      "name": "setRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "skim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableSwapPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "want",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8756b946f086060849589b7d5d15c9cb1a6c1a774bd2f1024d096e02c5768399",
  "receipt": {
    "to": null,
    "from": "0x633Db21C73594FBB1cD0DC8829682874f35aD8EF",
    "contractAddress": "0x0808A1Fd2eaBE2b74d649E164a7bb5d4aD07F4A3",
    "transactionIndex": 30,
    "gasUsed": "2780294",
    "logsBloom": "0x
    "blockHash": "0xc8a1ba7501db5606ce9d70f217b68e021fca0ec421391e33fd8cdebea49f6a20",
    "transactionHash": "0x8756b946f086060849589b7d5d15c9cb1a6c1a774bd2f1024d096e02c5768399",
    "logs": [
      {
        "transactionIndex": 30,
        "blockNumber": 14781410,
        "transactionHash": "0x8756b946f086060849589b7d5d15c9cb1a6c1a774bd2f1024d096e02c5768399",
        "address": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000808a1fd2eabe2b74d649e164a7bb5d4ad07f4a3",
          "0x000000000000000000000000d9e1ce17f2641f24ae83637ab66a2cca9c378b9f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 44,
        "blockHash": "0xc8a1ba7501db5606ce9d70f217b68e021fca0ec421391e33fd8cdebea49f6a20"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 14781410,
        "transactionHash": "0x8756b946f086060849589b7d5d15c9cb1a6c1a774bd2f1024d096e02c5768399",
        "address": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000808a1fd2eabe2b74d649e164a7bb5d4ad07f4a3",
          "0x000000000000000000000000d9e1ce17f2641f24ae83637ab66a2cca9c378b9f"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 45,
        "blockHash": "0xc8a1ba7501db5606ce9d70f217b68e021fca0ec421391e33fd8cdebea49f6a20"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 14781410,
        "transactionHash": "0x8756b946f086060849589b7d5d15c9cb1a6c1a774bd2f1024d096e02c5768399",
        "address": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000808a1fd2eabe2b74d649e164a7bb5d4ad07f4a3",
          "0x0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 46,
        "blockHash": "0xc8a1ba7501db5606ce9d70f217b68e021fca0ec421391e33fd8cdebea49f6a20"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 14781410,
        "transactionHash": "0x8756b946f086060849589b7d5d15c9cb1a6c1a774bd2f1024d096e02c5768399",
        "address": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000808a1fd2eabe2b74d649e164a7bb5d4ad07f4a3",
          "0x0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 47,
        "blockHash": "0xc8a1ba7501db5606ce9d70f217b68e021fca0ec421391e33fd8cdebea49f6a20"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 14781410,
        "transactionHash": "0x8756b946f086060849589b7d5d15c9cb1a6c1a774bd2f1024d096e02c5768399",
        "address": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000808a1fd2eabe2b74d649e164a7bb5d4ad07f4a3",
          "0x000000000000000000000000a79828df1850e8a3a3064576f380d90aecdd3359"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 48,
        "blockHash": "0xc8a1ba7501db5606ce9d70f217b68e021fca0ec421391e33fd8cdebea49f6a20"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 14781410,
        "transactionHash": "0x8756b946f086060849589b7d5d15c9cb1a6c1a774bd2f1024d096e02c5768399",
        "address": "0xd632f22692FaC7611d2AA1C0D552930D43CAEd3B",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000808a1fd2eabe2b74d649e164a7bb5d4ad07f4a3",
          "0x000000000000000000000000f403c135812408bfbe8713b5a23a04b3d48aae31"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 49,
        "blockHash": "0xc8a1ba7501db5606ce9d70f217b68e021fca0ec421391e33fd8cdebea49f6a20"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 14781410,
        "transactionHash": "0x8756b946f086060849589b7d5d15c9cb1a6c1a774bd2f1024d096e02c5768399",
        "address": "0xd632f22692FaC7611d2AA1C0D552930D43CAEd3B",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000808a1fd2eabe2b74d649e164a7bb5d4ad07f4a3",
          "0x000000000000000000000000a79828df1850e8a3a3064576f380d90aecdd3359"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 50,
        "blockHash": "0xc8a1ba7501db5606ce9d70f217b68e021fca0ec421391e33fd8cdebea49f6a20"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 14781410,
        "transactionHash": "0x8756b946f086060849589b7d5d15c9cb1a6c1a774bd2f1024d096e02c5768399",
        "address": "0xD533a949740bb3306d119CC777fa900bA034cd52",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000808a1fd2eabe2b74d649e164a7bb5d4ad07f4a3",
          "0x0000000000000000000000008301ae4fc9c624d1d396cbdaa1ed877821d7c511"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 51,
        "blockHash": "0xc8a1ba7501db5606ce9d70f217b68e021fca0ec421391e33fd8cdebea49f6a20"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 14781410,
        "transactionHash": "0x8756b946f086060849589b7d5d15c9cb1a6c1a774bd2f1024d096e02c5768399",
        "address": "0xD533a949740bb3306d119CC777fa900bA034cd52",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000808a1fd2eabe2b74d649e164a7bb5d4ad07f4a3",
          "0x0000000000000000000000008301ae4fc9c624d1d396cbdaa1ed877821d7c511"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 52,
        "blockHash": "0xc8a1ba7501db5606ce9d70f217b68e021fca0ec421391e33fd8cdebea49f6a20"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 14781410,
        "transactionHash": "0x8756b946f086060849589b7d5d15c9cb1a6c1a774bd2f1024d096e02c5768399",
        "address": "0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000808a1fd2eabe2b74d649e164a7bb5d4ad07f4a3",
          "0x000000000000000000000000b576491f1e6e5e62f1d8f26062ee822b40b0e0d4"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 53,
        "blockHash": "0xc8a1ba7501db5606ce9d70f217b68e021fca0ec421391e33fd8cdebea49f6a20"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 14781410,
        "transactionHash": "0x8756b946f086060849589b7d5d15c9cb1a6c1a774bd2f1024d096e02c5768399",
        "address": "0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000808a1fd2eabe2b74d649e164a7bb5d4ad07f4a3",
          "0x000000000000000000000000b576491f1e6e5e62f1d8f26062ee822b40b0e0d4"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 54,
        "blockHash": "0xc8a1ba7501db5606ce9d70f217b68e021fca0ec421391e33fd8cdebea49f6a20"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 14781410,
        "transactionHash": "0x8756b946f086060849589b7d5d15c9cb1a6c1a774bd2f1024d096e02c5768399",
        "address": "0x3432B6A60D23Ca0dFCa7761B7ab56459D9C964D0",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000808a1fd2eabe2b74d649e164a7bb5d4ad07f4a3",
          "0x000000000000000000000000d9e1ce17f2641f24ae83637ab66a2cca9c378b9f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 55,
        "blockHash": "0xc8a1ba7501db5606ce9d70f217b68e021fca0ec421391e33fd8cdebea49f6a20"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 14781410,
        "transactionHash": "0x8756b946f086060849589b7d5d15c9cb1a6c1a774bd2f1024d096e02c5768399",
        "address": "0x3432B6A60D23Ca0dFCa7761B7ab56459D9C964D0",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000808a1fd2eabe2b74d649e164a7bb5d4ad07f4a3",
          "0x000000000000000000000000d9e1ce17f2641f24ae83637ab66a2cca9c378b9f"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 56,
        "blockHash": "0xc8a1ba7501db5606ce9d70f217b68e021fca0ec421391e33fd8cdebea49f6a20"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 14781410,
        "transactionHash": "0x8756b946f086060849589b7d5d15c9cb1a6c1a774bd2f1024d096e02c5768399",
        "address": "0x3432B6A60D23Ca0dFCa7761B7ab56459D9C964D0",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000808a1fd2eabe2b74d649e164a7bb5d4ad07f4a3",
          "0x0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 57,
        "blockHash": "0xc8a1ba7501db5606ce9d70f217b68e021fca0ec421391e33fd8cdebea49f6a20"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 14781410,
        "transactionHash": "0x8756b946f086060849589b7d5d15c9cb1a6c1a774bd2f1024d096e02c5768399",
        "address": "0x3432B6A60D23Ca0dFCa7761B7ab56459D9C964D0",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000808a1fd2eabe2b74d649e164a7bb5d4ad07f4a3",
          "0x0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 58,
        "blockHash": "0xc8a1ba7501db5606ce9d70f217b68e021fca0ec421391e33fd8cdebea49f6a20"
      }
    ],
    "blockNumber": 14781410,
    "cumulativeGasUsed": "4946445",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "NumisMe Convex Strategy: FRAXCRV",
    "0xd632f22692FaC7611d2AA1C0D552930D43CAEd3B",
    "0x8301AE4fc9c624d1D396cbDAa1ed877821D7C511",
    "0xB576491F1E6e5E62f1d8F26062Ee822B40B0E0d4",
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
    32,
    "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
    "0xd632f22692FaC7611d2AA1C0D552930D43CAEd3B",
    "0xF403C135812408BFbE8713b5A23a04b3D48AAE31",
    "0xA79828DF1850E8a3A3064576f380D90aECDD3359",
    "0x6dB53Ed036135f2c299d54353b2ae7e748a85628",
    "0xec5CdD1a415bE0b1d513cc420e4fC80CA3ca7590",
    [
      "0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F",
      "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "2f52fc9e2c9436dbe54a500dcc1ea2eb",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_want\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crvethPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cvxethPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fraxPool\",\"type\":\"address\"},{\"internalType\":\"contract IConvexVault\",\"name\":\"_convexVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stableSwapPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_routerArray\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ONE_HUNDRED_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveForSpender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexVault\",\"outputs\":[{\"internalType\":\"contract IConvexVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvRewards\",\"outputs\":[{\"internalType\":\"contract IConvexRewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvethPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvxethPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fraxPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_estimates\",\"type\":\"uint256[]\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"contract IManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"routerArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_routerIndex\",\"type\":\"uint256\"}],\"name\":\"setDefaultRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_routerArray\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokenArray\",\"type\":\"address[]\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableSwapPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approveForSpender(address,address,uint256)\":{\"params\":{\"_amount\":\"The amount to spend\",\"_spender\":\"The address of the spender\",\"_token\":\"The address of the token\"}},\"balanceOfPool()\":{\"details\":\"Must be implemented by the strategy\"},\"constructor\":{\"params\":{\"_controller\":\"The address of the controller\",\"_convexVault\":\"The address of the convex vault\",\"_crvethPool\":\"The address of crvEthPool\",\"_cvxethPool\":\"The address of cvxEthPool\",\"_fraxPool\":\"The address of FRAX pool\",\"_manager\":\"The address of the manager\",\"_name\":\"The strategy name\",\"_pid\":\"The pool id of convex\",\"_routerArray\":\"The addresses of routers for swapping tokens\",\"_stableSwapPool\":\"The address of the stable swap pool\",\"_usdc\":\"The address of USDC\",\"_want\":\"The desired token of the strategy\",\"_weth\":\"The address of WETH\"}},\"setDefaultRouter(uint256)\":{\"params\":{\"_routerIndex\":\"Gets the address of the router from routerArray\"}},\"setRouter(address[],address[])\":{\"params\":{\"_routerArray\":\"The addresses of routers\",\"_tokenArray\":\"The addresses of tokens that need to be approved by the strategy\"}},\"withdraw(address)\":{\"params\":{\"_asset\":\"The address of the token to withdraw\"}},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"The amount of the want token to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveForSpender(address,address,uint256)\":{\"notice\":\"Approves a token address to be spent by an address\"},\"balanceOf()\":{\"notice\":\"Returns the strategy's balance of the want token plus the balance of pool\"},\"balanceOfPool()\":{\"notice\":\"Returns the balance of the pool\"},\"balanceOfWant()\":{\"notice\":\"Returns the balance of the want token on the strategy\"},\"deposit()\":{\"notice\":\"Deposits funds to the strategy's pool\"},\"harvest(uint256[])\":{\"notice\":\"Harvest funds in the strategy's pool\"},\"setDefaultRouter(uint256)\":{\"notice\":\"Sets the default ISwap-compatible router\"},\"setRouter(address[],address[])\":{\"notice\":\"Sets the address of the ISwap-compatible router\"},\"skim()\":{\"notice\":\"Sends stuck want tokens in the strategy to the controller\"},\"withdraw(address)\":{\"notice\":\"Sends stuck tokens in the strategy to the controller\"},\"withdraw(uint256)\":{\"notice\":\"Initiated from a vault, withdraws funds from the pool\"},\"withdrawAll()\":{\"notice\":\"Withdraws all funds from the strategy\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v3/strategies/FraxConvexStrategy.sol\":\"FraxConvexStrategy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/v3/interfaces/ExtendedIERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\ninterface ExtendedIERC20 {\\n    function decimals() external view returns (uint8);\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x4ba01563f54a2993c1491d32f777e3df1af02151bef35d87a138b6d8fb5819bd\",\"license\":\"MIT\"},\"contracts/v3/interfaces/ICVXMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface ICVXMinter {\\n    function maxSupply() external view returns (uint256);\\n    function totalSupply() external view returns (uint256);\\n    function totalCliffs() external view returns (uint256);\\n    function reductionPerCliff() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x61a7da2da0bf72808ee8dd460affb0768426991383a17cdd881cf0e638453a48\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IManager.sol\\\";\\n\\ninterface IController {\\n    function balanceOf() external view returns (uint256);\\n    function converter(address _vault) external view returns (address);\\n    function earn(address _strategy, address _token, uint256 _amount) external;\\n    function investEnabled() external view returns (bool);\\n    function harvestStrategy(address _strategy, uint256[] calldata _estimates) external;\\n    function manager() external view returns (IManager);\\n    function strategies() external view returns (uint256);\\n    function withdraw(address _token, uint256 _amount) external;\\n    function withdrawAll(address _strategy, address _convert) external;\\n}\\n\",\"keccak256\":\"0x8ce01e149a62d561d025ba8671b7487d33090189d896dcfc0f5464870b85d38e\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IConvexVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IConvexVault {\\n    function poolInfo(uint256 pid)\\n        external\\n        view\\n        returns (\\n            address lptoken,\\n            address token,\\n            address gauge,\\n            address crvRewards,\\n            address stash,\\n            bool shutdown\\n        );\\n\\n    function deposit(\\n        uint256 pid,\\n        uint256 amount,\\n        bool stake\\n    ) external returns (bool);\\n\\n    function depositAll(uint256 pid, bool stake) external returns (bool);\\n\\n    function withdraw(uint256 pid, uint256 amount) external returns (bool);\\n\\n    function withdrawAll(uint256 pid) external returns (bool);\\n}\\n\\ninterface IConvexRewards {\\n    function getReward(address _account, bool _claimExtras) external returns (bool);\\n\\n    function extraRewardsLength() external view returns (uint256);\\n\\n    function extraRewards(uint256 _pid) external view returns (address);\\n\\n    function rewardToken() external view returns (address);\\n\\n    function earned(address _account) external view returns (uint256);\\n\\n    function withdrawAllAndUnwrap(bool claim) external;\\n\\n    function withdrawAndUnwrap(uint256 amount, bool claim) external returns(bool);\\n}\\n\",\"keccak256\":\"0x5305775695c0a90b2b264ffdabe0563164964068f5a591f7f6bc7c37f5053397\",\"license\":\"MIT\"},\"contracts/v3/interfaces/ICurvePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable func-name-mixedcase\\n// solhint-disable var-name-mixedcase\\n\\npragma solidity 0.6.12;\\n\\ninterface ICurvePool {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function coins(uint256) external view returns (address);\\n\\n    function balances(uint256) external view returns (uint256);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256 dy);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external;\\n\\n    function exchange(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 min_amount\\n    ) external;\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x40e6ba079b585d7d83da72a757ff1b0a3e4b75be9a0ef8501eaf96c8d630af72\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IHarvester.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IManager.sol\\\";\\n\\ninterface IHarvester {\\n    function addStrategy(address, address, uint256) external;\\n    function manager() external view returns (IManager);\\n    function removeStrategy(address, address, uint256) external;\\n    function slippage() external view returns (uint256);\\n}\\n\\n\",\"keccak256\":\"0x2047997ad37599e5b472606ec5f1433b2086b3a7eec31c27bc88d1e9a27cd720\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IManager {\\n    function addVault(address) external;\\n    function allowedControllers(address) external view returns (bool);\\n    function allowedConverters(address) external view returns (bool);\\n    function allowedStrategies(address) external view returns (bool);\\n    function allowedVaults(address) external view returns (bool);\\n    function controllers(address) external view returns (address);\\n    function getHarvestFeeInfo() external view returns (address, address, uint256);\\n    function getToken(address) external view returns (address);\\n    function governance() external view returns (address);\\n    function halted() external view returns (bool);\\n    function harvester() external view returns (address);\\n    function insuranceFee() external view returns (uint256);\\n    function insurancePool() external view returns (address);\\n    function insurancePoolFee() external view returns (uint256);\\n    function pendingStrategist() external view returns (address);\\n    function removeVault(address) external;\\n    function stakingPool() external view returns (address);\\n    function stakingPoolShareFee() external view returns (uint256);\\n    function strategist() external view returns (address);\\n    function treasury() external view returns (address);\\n    function treasuryFee() external view returns (uint256);\\n    function withdrawalProtectionFee() external view returns (uint256);\\n    function yaxis() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7643ce13f4882cd5e4fef64c7e82ef6b7037af24afb88ca0e97922f93d52850d\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IStableSwap3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable func-name-mixedcase\\n// solhint-disable var-name-mixedcase\\n\\npragma solidity 0.6.12;\\n\\ninterface IStableSwap3Pool {\\n    function get_virtual_price() external view returns (uint);\\n    function balances(uint) external view returns (uint);\\n    function coins(uint) external view returns (address);\\n    function get_dy(int128 i, int128 j, uint dx) external view returns (uint dy);\\n    function exchange(int128 i, int128 j, uint dx, uint min_dy) external;\\n    function add_liquidity(uint[3] calldata amounts, uint min_mint_amount) external payable;\\n    function remove_liquidity(uint _amount, uint[3] calldata amounts) external;\\n    function remove_liquidity_one_coin(uint _token_amount, int128 i, uint min_amount) external;\\n    function calc_token_amount(uint[3] calldata amounts, bool deposit) external view returns (uint);\\n    function calc_withdraw_one_coin(uint _token_amount, int128 i) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x5976fae0615044f93f176538143458825c0528dd4f762c8e9ac855b84b3bede6\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IStableSwapPoolFrax.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable func-name-mixedcase\\n// solhint-disable var-name-mixedcase\\n\\npragma solidity 0.6.12;\\n\\ninterface IStableSwapPool {\\n    function add_liquidity(address pool, uint[4] calldata amounts, uint min_mint_amount) external;\\n}\\n\",\"keccak256\":\"0x3e7511e80314ae63d2d059e1a8bb6d60e94faa2da9df96257f7abb0e6b756c41\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IManager.sol\\\";\\nimport \\\"./ISwap.sol\\\";\\n\\ninterface IStrategy {\\n    function balanceOf() external view returns (uint256);\\n    function balanceOfPool() external view returns (uint256);\\n    function balanceOfWant() external view returns (uint256);\\n    function deposit() external;\\n    function harvest(uint256[] calldata) external;\\n    function manager() external view returns (IManager);\\n    function name() external view returns (string memory);\\n    function router() external view returns (ISwap);\\n    function skim() external;\\n    function want() external view returns (address);\\n    function weth() external view returns (address);\\n    function withdraw(address) external;\\n    function withdraw(uint256) external;\\n    function withdrawAll() external;\\n}\\n\\ninterface IStrategyExtended {\\n    function getEstimates() external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xd1929e523830a082079cd819f46345ee5c28d79a1f271b2b0d58683194133938\",\"license\":\"MIT\"},\"contracts/v3/interfaces/ISwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\ninterface ISwap {\\n    function swapExactTokensForTokens(uint256, uint256, address[] calldata, address, uint256) external;\\n    function getAmountsOut(uint256, address[] calldata) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x054e1fbb6e5fc879fcd57c1fe554fe9838dbae742d35df59541c200e50fc6b59\",\"license\":\"MIT\"},\"contracts/v3/strategies/BaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"../interfaces/IStableSwap3Pool.sol\\\";\\nimport \\\"../interfaces/ICurvePool.sol\\\";\\nimport \\\"../interfaces/ISwap.sol\\\";\\nimport \\\"../interfaces/IManager.sol\\\";\\nimport \\\"../interfaces/IStrategy.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\n\\n/**\\n * @title BaseStrategy\\n * @notice The BaseStrategy is an abstract contract which all\\n * yAxis strategies should inherit functionality from. It gives\\n * specific security properties which make it hard to write an\\n * insecure strategy.\\n * @notice All state-changing functions implemented in the strategy\\n * should be internal, since any public or externally-facing functions\\n * are already handled in the BaseStrategy.\\n * @notice The following functions must be implemented by a strategy:\\n * - function _deposit() internal virtual;\\n * - function _harvest() internal virtual;\\n * - function _withdraw(uint256 _amount) internal virtual;\\n * - function _withdrawAll() internal virtual;\\n * - function balanceOfPool() public view override virtual returns (uint256);\\n */\\nabstract contract BaseStrategy is IStrategy {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    uint256 public constant ONE_HUNDRED_PERCENT = 10000;\\n\\n    address public immutable override want;\\n    address public immutable override weth;\\n    address public immutable controller;\\n    IManager public immutable override manager;\\n    string public override name;\\n    address[] public routerArray;\\n    ISwap public override router;\\n\\n    /**\\n     * @param _controller The address of the controller\\n     * @param _manager The address of the manager\\n     * @param _want The desired token of the strategy\\n     * @param _weth The address of WETH\\n     * @param _routerArray The addresses of routers for swapping tokens\\n     */\\n    constructor(\\n        string memory _name,\\n        address _controller,\\n        address _manager,\\n        address _want,\\n        address _weth,\\n        address[] memory _routerArray\\n    ) public {\\n        name = _name;\\n        want = _want;\\n        controller = _controller;\\n        manager = IManager(_manager);\\n        weth = _weth;\\n        require(_routerArray.length > 0, \\\"Must input at least one router\\\");\\n        routerArray = _routerArray;\\n        router = ISwap(_routerArray[0]);\\n        for(uint i = 0; i < _routerArray.length; i++) {\\n            IERC20(_weth).safeApprove(address(_routerArray[i]), 0);\\n            IERC20(_weth).safeApprove(address(_routerArray[i]), type(uint256).max);\\n        }\\n        \\n    }\\n\\n    /**\\n     * GOVERNANCE-ONLY FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Approves a token address to be spent by an address\\n     * @param _token The address of the token\\n     * @param _spender The address of the spender\\n     * @param _amount The amount to spend\\n     */\\n    function approveForSpender(\\n        IERC20 _token,\\n        address _spender,\\n        uint256 _amount\\n    )\\n        external\\n    {\\n        require(msg.sender == manager.governance(), \\\"!governance\\\");\\n        _token.safeApprove(_spender, 0);\\n        _token.safeApprove(_spender, _amount);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the ISwap-compatible router\\n     * @param _routerArray The addresses of routers\\n     * @param _tokenArray The addresses of tokens that need to be approved by the strategy\\n     */\\n     function setRouter(\\n        address[] calldata _routerArray,\\n        address[] calldata _tokenArray\\n    )\\n        external\\n    {\\n        require(msg.sender == manager.governance(), \\\"!governance\\\");\\n        routerArray = _routerArray;\\n        router = ISwap(_routerArray[0]);\\n        address _router;\\n        uint256 _routerLength = _routerArray.length;\\n        uint256 _tokenArrayLength = _tokenArray.length;\\n        for(uint i = 0; i < _routerLength; i++) {\\n            _router = _routerArray[i];\\n            IERC20(weth).safeApprove(_router, 0);\\n            IERC20(weth).safeApprove(_router, type(uint256).max);\\n            for(uint j = 0; j < _tokenArrayLength; j++) {\\n                IERC20(_tokenArray[j]).safeApprove(_router, 0);\\n                IERC20(_tokenArray[j]).safeApprove(_router, type(uint256).max);\\n            }\\n        }\\n\\n    }\\n    \\n    /**\\n     * @notice Sets the default ISwap-compatible router\\n     * @param _routerIndex Gets the address of the router from routerArray\\n     */\\n     function setDefaultRouter(\\n        uint256 _routerIndex\\n    )\\n        external\\n    {\\n    \\trequire(msg.sender == manager.governance(), \\\"!governance\\\");\\n    \\trouter = ISwap(routerArray[_routerIndex]);\\n    }\\n\\n    /**\\n     * CONTROLLER-ONLY FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Deposits funds to the strategy's pool\\n     */\\n    function deposit()\\n        external\\n        override\\n        onlyController\\n    {\\n        _deposit();\\n    }\\n\\n    /**\\n     * @notice Harvest funds in the strategy's pool\\n     */\\n    function harvest(\\n        uint256[] calldata _estimates\\n    )\\n        external\\n        override\\n        onlyController\\n    {\\n        _harvest(_estimates);\\n    }\\n\\n    /**\\n     * @notice Sends stuck want tokens in the strategy to the controller\\n     */\\n    function skim()\\n        external\\n        override\\n        onlyController\\n    {\\n        IERC20(want).safeTransfer(controller, balanceOfWant());\\n    }\\n\\n    /**\\n     * @notice Sends stuck tokens in the strategy to the controller\\n     * @param _asset The address of the token to withdraw\\n     */\\n    function withdraw(\\n        address _asset\\n    )\\n        external\\n        override\\n        onlyController\\n    {\\n        require(want != _asset, \\\"want\\\");\\n\\n        IERC20 _assetToken = IERC20(_asset);\\n        uint256 _balance = _assetToken.balanceOf(address(this));\\n        _assetToken.safeTransfer(controller, _balance);\\n    }\\n\\n    /**\\n     * @notice Initiated from a vault, withdraws funds from the pool\\n     * @param _amount The amount of the want token to withdraw\\n     */\\n    function withdraw(\\n        uint256 _amount\\n    )\\n        external\\n        override\\n        onlyController\\n    {\\n        uint256 _balance = balanceOfWant();\\n        if (_balance < _amount) {\\n            _amount = _withdrawSome(_amount.sub(_balance));\\n            _amount = _amount.add(_balance);\\n        }\\n\\n        IERC20(want).safeTransfer(controller, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraws all funds from the strategy\\n     */\\n    function withdrawAll()\\n        external\\n        override\\n        onlyController\\n    {\\n        _withdrawAll();\\n\\n        uint256 _balance = IERC20(want).balanceOf(address(this));\\n\\n        IERC20(want).safeTransfer(controller, _balance);\\n    }\\n\\n    /**\\n     * EXTERNAL VIEW FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Returns the strategy's balance of the want token plus the balance of pool\\n     */\\n    function balanceOf()\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return balanceOfWant().add(balanceOfPool());\\n    }\\n\\n    /**\\n     * PUBLIC VIEW FUNCTIONS\\n     */\\n\\n    /**\\n     * @notice Returns the balance of the pool\\n     * @dev Must be implemented by the strategy\\n     */\\n    function balanceOfPool()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256);\\n\\n    /**\\n     * @notice Returns the balance of the want token on the strategy\\n     */\\n    function balanceOfWant()\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return IERC20(want).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * INTERNAL FUNCTIONS\\n     */\\n\\n    function _deposit()\\n        internal\\n        virtual;\\n\\n    function _harvest(\\n        uint256[] calldata _estimates\\n    )\\n        internal\\n        virtual;\\n\\n    function _payHarvestFees()\\n        internal\\n        returns (uint256 _wethBal)\\n    {\\n        _wethBal = IERC20(weth).balanceOf(address(this));\\n        if (_wethBal > 0) {\\n            // get all the necessary variables in a single call\\n            (\\n                ,\\n                address treasury,\\n                uint256 treasuryFee\\n            ) = manager.getHarvestFeeInfo();\\n            uint256 _fee;\\n            // pay the treasury with YAX\\n            if (treasuryFee > 0 && treasury != address(0)) {\\n                _fee = _wethBal.mul(treasuryFee).div(ONE_HUNDRED_PERCENT);\\n\\n                IERC20(weth).safeTransfer(treasury, _fee);\\n            }\\n            // return the remaining WETH balance\\n            _wethBal = IERC20(weth).balanceOf(address(this));\\n        }\\n    }\\n\\n    function _swapTokensWithRouterIndex(\\n        address _input,\\n        address _output,\\n        uint256 _amount,\\n        uint256 _expected,\\n        uint256 _routerIndex\\n    )\\n        internal\\n    {\\n        address[] memory path = new address[](2);\\n        path[0] = _input;\\n        path[1] = _output;\\n        ISwap(routerArray[_routerIndex]).swapExactTokensForTokens(\\n            _amount,\\n            _expected,\\n            path,\\n            address(this),\\n            // The deadline is a hardcoded value that is far in the future.\\n            1e10\\n        );\\n    }\\n    \\n    function _swapTokens(\\n        address _input,\\n        address _output,\\n        uint256 _amount,\\n        uint256 _expected\\n    )\\n        internal\\n    {\\n        address[] memory path = new address[](2);\\n        path[0] = _input;\\n        path[1] = _output;\\n        router.swapExactTokensForTokens(\\n            _amount,\\n            _expected,\\n            path,\\n            address(this),\\n            // The deadline is a hardcoded value that is far in the future.\\n            1e10\\n        );\\n    }\\n\\n    function _swapTokensCurve(\\n        address _pool,\\n        uint256 _i,\\n        uint256 _j,\\n        uint256 _dx,\\n        uint256 _min_dy\\n    )\\n        internal\\n    {\\n        ICurvePool(_pool).exchange(\\n            _i,\\n            _j,\\n            _dx,\\n            _min_dy\\n        );\\n    }\\n\\n    function _withdraw(\\n        uint256 _amount\\n    )\\n        internal\\n        virtual;\\n\\n    function _withdrawAll()\\n        internal\\n        virtual;\\n\\n    function _withdrawSome(\\n        uint256 _amount\\n    )\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 _before = IERC20(want).balanceOf(address(this));\\n        _withdraw(_amount);\\n        uint256 _after = IERC20(want).balanceOf(address(this));\\n        _amount = _after.sub(_before);\\n\\n        return _amount;\\n    }\\n\\n    /**\\n     * MODIFIERS\\n     */\\n\\n    modifier onlyStrategist() {\\n        require(msg.sender == manager.strategist(), \\\"!strategist\\\");\\n        _;\\n    }\\n\\n    modifier onlyController() {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x98c9463308ee765171e39aacfd88dbdbc27897d1f7aaab62c88fb7caa9ce1895\",\"license\":\"MIT\"},\"contracts/v3/strategies/FraxConvexStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\nimport '../interfaces/IConvexVault.sol';\\nimport '../interfaces/ExtendedIERC20.sol';\\nimport '../interfaces/IStableSwapPoolFrax.sol';\\nimport './BaseStrategy.sol';\\nimport '../interfaces/ICVXMinter.sol';\\nimport '../interfaces/IHarvester.sol';\\ncontract FraxConvexStrategy is BaseStrategy {\\n    using SafeMath for uint8;\\n\\n    address public immutable crv;\\n    address public immutable cvx;\\n    address public immutable usdc;\\n\\n    address public immutable crvethPool;\\n    address public immutable cvxethPool;\\n\\n    uint256 public immutable pid;\\n    IConvexVault public immutable convexVault;\\n    IConvexRewards public immutable crvRewards;\\n    address public immutable stableSwapPool;\\n    address public immutable fraxPool;\\n\\n    /**\\n     * @param _name The strategy name\\n     * @param _want The desired token of the strategy\\n     * @param _crvethPool The address of crvEthPool\\n     * @param _cvxethPool The address of cvxEthPool\\n     * @param _weth The address of WETH\\n     * @param _pid The pool id of convex\\n     * @param _usdc The address of USDC\\n     * @param _fraxPool The address of FRAX pool\\n     * @param _convexVault The address of the convex vault\\n     * @param _stableSwapPool The address of the stable swap pool\\n     * @param _controller The address of the controller\\n     * @param _manager The address of the manager\\n     * @param _routerArray The addresses of routers for swapping tokens\\n     */\\n    constructor(\\n        string memory _name,\\n        address _want,\\n        address _crvethPool,\\n        address _cvxethPool,\\n        address _weth,\\n        uint256 _pid,\\n        address _usdc,\\n        address _fraxPool,\\n        IConvexVault _convexVault,\\n        address _stableSwapPool,\\n        address _controller,\\n        address _manager,\\n        address[] memory _routerArray // [1] should be set to Uniswap router\\n    ) public BaseStrategy(_name, _controller, _manager, _want, _weth, _routerArray) {\\n        require(address(_convexVault) != address(0), '!_convexVault');\\n        require(address(_stableSwapPool) != address(0), '!_stableSwapPool');\\n\\n        (, , , address _crvRewards, , ) = _convexVault.poolInfo(_pid);\\n        crv = ICurvePool(_crvethPool).coins(1);\\n        cvx = ICurvePool(_cvxethPool).coins(1);\\n        usdc = _usdc;\\n        fraxPool = _fraxPool;\\n        pid = _pid;\\n        convexVault = _convexVault;\\n        crvRewards = IConvexRewards(_crvRewards);\\n        stableSwapPool = _stableSwapPool;\\n        crvethPool = _crvethPool;\\n        cvxethPool = _cvxethPool;\\n\\n        IERC20(_usdc).safeApprove(_stableSwapPool, type(uint256).max);\\n        IERC20(_want).safeApprove(address(_convexVault), type(uint256).max);\\n        IERC20(_want).safeApprove(address(_stableSwapPool), type(uint256).max);\\n        _setApprovals(_crvethPool, _cvxethPool, _routerArray, _crvRewards);\\n    }\\n\\n    function _setApprovals(\\n        address _crvethPool,\\n        address _cvxethPool,\\n    \\taddress[] memory _routerArray,\\n    \\taddress _crvRewards\\n    ) internal {\\n        IERC20(ICurvePool(_crvethPool).coins(1)).safeApprove(_crvethPool, 0);\\n        IERC20(ICurvePool(_crvethPool).coins(1)).safeApprove(_crvethPool, type(uint256).max);\\n        IERC20(ICurvePool(_cvxethPool).coins(1)).safeApprove(_cvxethPool, 0);\\n        IERC20(ICurvePool(_cvxethPool).coins(1)).safeApprove(_cvxethPool, type(uint256).max);\\n    \\tuint _routerArrayLength = _routerArray.length;\\n\\t    uint rewardsLength = IConvexRewards(_crvRewards).extraRewardsLength();\\n        for(uint i=0; i<_routerArrayLength; i++) {\\n            address _router = _routerArray[i];\\n            if (rewardsLength > 0) {\\n            \\tfor(uint j=0; j<rewardsLength; j++) {\\n                    IERC20(IConvexRewards(IConvexRewards(_crvRewards).extraRewards(j)).rewardToken()).safeApprove(_router, 0);\\n                    IERC20(IConvexRewards(IConvexRewards(_crvRewards).extraRewards(j)).rewardToken()).safeApprove(_router, type(uint256).max);\\n            \\t}\\n            }\\t\\n    \\t}\\n    }\\n    \\n    function _deposit() internal override {\\n        convexVault.depositAll(pid, true);\\n    }\\n\\n    function _claimReward() internal {\\n        crvRewards.getReward(address(this), true);\\n    }\\n\\n    function _addLiquidity(uint256 _estimate) internal {\\n        uint256[4] memory amounts;\\n        amounts[2] = IERC20(usdc).balanceOf(address(this));\\n        IStableSwapPool(stableSwapPool).add_liquidity(fraxPool, amounts, _estimate);\\n    }\\n\\n    function _harvest(uint256[] calldata _estimates) internal override {\\n        _claimReward();\\n        uint256 _cvxBalance = IERC20(cvx).balanceOf(address(this));\\n        if (_cvxBalance > 0) {\\n            _swapTokensCurve(cvxethPool, 1, 0, _cvxBalance, 1);\\n        }\\n\\n        uint256 _extraRewardsLength = crvRewards.extraRewardsLength();\\n        for (uint256 i = 0; i < _extraRewardsLength; i++) {\\n            address _rewardToken = IConvexRewards(crvRewards.extraRewards(i)).rewardToken();\\n            uint256 _extraRewardBalance = IERC20(_rewardToken).balanceOf(address(this));\\n            if (_extraRewardBalance > 0) {\\n                _swapTokens(_rewardToken, weth, _extraRewardBalance, 1);\\n            }\\n        }\\n\\n        uint256 _crvBalance = IERC20(crv).balanceOf(address(this));\\n        if (_crvBalance > 0) {\\n            _swapTokensCurve(crvethPool, 1, 0, _crvBalance, 1);\\n        }\\n        uint256 _remainingWeth = _payHarvestFees();\\n        if (_remainingWeth > 0) {\\n            _swapTokens(weth, usdc, _remainingWeth, 1);\\n            _addLiquidity(_estimates[0]);\\n\\n            if (balanceOfWant() > 0) {\\n                _deposit();\\n            }\\n        }\\n    }\\n\\n    function _withdrawAll() internal override {\\n        crvRewards.withdrawAllAndUnwrap(false);\\n    }\\n\\n    function _withdraw(uint256 _amount) internal override {\\n        crvRewards.withdrawAndUnwrap(_amount, false);\\n    }\\n\\n    function balanceOfPool() public view override returns (uint256) {\\n        return IERC20(address(crvRewards)).balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x640576bc1d9d212209e9db3342e3afa1e25da893b6cb9acc6a3cb88fab793db6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approveForSpender(address,address,uint256)": {
        "params": {
          "_amount": "The amount to spend",
          "_spender": "The address of the spender",
          "_token": "The address of the token"
        }
      },
      "balanceOfPool()": {
        "details": "Must be implemented by the strategy"
      },
      "constructor": {
        "params": {
          "_controller": "The address of the controller",
          "_convexVault": "The address of the convex vault",
          "_crvethPool": "The address of crvEthPool",
          "_cvxethPool": "The address of cvxEthPool",
          "_fraxPool": "The address of FRAX pool",
          "_manager": "The address of the manager",
          "_name": "The strategy name",
          "_pid": "The pool id of convex",
          "_routerArray": "The addresses of routers for swapping tokens",
          "_stableSwapPool": "The address of the stable swap pool",
          "_usdc": "The address of USDC",
          "_want": "The desired token of the strategy",
          "_weth": "The address of WETH"
        }
      },
      "setDefaultRouter(uint256)": {
        "params": {
          "_routerIndex": "Gets the address of the router from routerArray"
        }
      },
      "setRouter(address[],address[])": {
        "params": {
          "_routerArray": "The addresses of routers",
          "_tokenArray": "The addresses of tokens that need to be approved by the strategy"
        }
      },
      "withdraw(address)": {
        "params": {
          "_asset": "The address of the token to withdraw"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": "The amount of the want token to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveForSpender(address,address,uint256)": {
        "notice": "Approves a token address to be spent by an address"
      },
      "balanceOf()": {
        "notice": "Returns the strategy's balance of the want token plus the balance of pool"
      },
      "balanceOfPool()": {
        "notice": "Returns the balance of the pool"
      },
      "balanceOfWant()": {
        "notice": "Returns the balance of the want token on the strategy"
      },
      "deposit()": {
        "notice": "Deposits funds to the strategy's pool"
      },
      "harvest(uint256[])": {
        "notice": "Harvest funds in the strategy's pool"
      },
      "setDefaultRouter(uint256)": {
        "notice": "Sets the default ISwap-compatible router"
      },
      "setRouter(address[],address[])": {
        "notice": "Sets the address of the ISwap-compatible router"
      },
      "skim()": {
        "notice": "Sends stuck want tokens in the strategy to the controller"
      },
      "withdraw(address)": {
        "notice": "Sends stuck tokens in the strategy to the controller"
      },
      "withdraw(uint256)": {
        "notice": "Initiated from a vault, withdraws funds from the pool"
      },
      "withdrawAll()": {
        "notice": "Withdraws all funds from the strategy"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9697,
        "contract": "contracts/v3/strategies/FraxConvexStrategy.sol:FraxConvexStrategy",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 9700,
        "contract": "contracts/v3/strategies/FraxConvexStrategy.sol:FraxConvexStrategy",
        "label": "routerArray",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 9703,
        "contract": "contracts/v3/strategies/FraxConvexStrategy.sol:FraxConvexStrategy",
        "label": "router",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ISwap)8804"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(ISwap)8804": {
        "encoding": "inplace",
        "label": "contract ISwap",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}